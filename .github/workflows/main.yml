name: CI/CD Pipeline for API RFD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/api.reusableform:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy docker-compose file to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: './docker-compose.yml'
          target: '/home/${{ secrets.SSH_USER }}/rfd/api'

      - name: Create .env file on VPS
        run: |
          ssh -o "StrictHostKeyChecking=no" -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd /home/${{ secrets.SSH_USER }}/rfd/api
          echo APP_DB_PASSWORD=${{ secrets.APP_DB_PASSWORD }} >> .env
          echo CORS=${{ secrets.CORS }} >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo DOCKER_TOKEN=${{ secrets.DOCKER_TOKEN }} >> .env
          echo DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env
          echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env
          EOF

      - name: Create .env.pgadmin file on VPS
        run: |
          ssh -o "StrictHostKeyChecking=no" -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd /home/${{ secrets.SSH_USER }}/rfd/api
          echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env.pgadmin
          echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env.pgadmin
          EOF

      - name: Deploy API on VPS
        run: |
          ssh -o "StrictHostKeyChecking=no" -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd /home/${{ secrets.SSH_USER }}/rfd/api
          docker compose -f docker-compose.yml down
          docker compose -f docker-compose.yml pull
          docker compose -f docker-compose.yml up -d
          EOF

# Penser que le fichier .env est créé à partir des github secrets.
# créer le réseau docker sur le serveur ou rajouter la ligne "docker network create rfd_network || true  # Crée le réseau si absent"
